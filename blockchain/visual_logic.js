/**
 * Generated by Verge3D Puzzles v.4.2.0
 * Sat, 06 May 2023 15:32:53 GMT
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */
function createPL() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.openedFileMeta = {};
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};
_pGlob.customEvents = new v3d.EventDispatcher();
_pGlob.eventListeners = [];

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = {};
// backward compatibility
v3d.PL = v3d.puzzles = PL;

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    
    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["hideEqual"] = hideEqual;
this.procedures["lastAnno"] = lastAnno;

var checkRemine, numBlock, checkEditStartOutline, thirdBlock, check, secondBlock, firstBlock;

// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    if (appInstance.scene) {
        appInstance.scene.traverse(function(obj) {
            if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
                objFound = obj;
                if (runTime) {
                    _pGlob.objCache[objName] = objFound;
                }
            }
        });
    }
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}

// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
        obj.resolveMultiMaterial().forEach(function(objR) {
            objR.visible = bool;
        });
    }
}

/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && 'coordSystem' in scene.userData) {
        return scene.userData.coordSystem;
    }

    return 'Y_UP_RIGHT';
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();

// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {
    var camera = appInstance.getCamera();

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(worldTarget, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
            camera.parent.worldToLocal(worldPos);
        }
        camera.position.copy(worldPos);
        camera.lookAt(worldTarget);
        doSlot();
    }
}

function findUniqueObjectName(name) {
    function objNameUsed(name) {
        return Boolean(getObjectByName(name));
    }
    while (objNameUsed(name)) {
        var r = name.match(/^(.*?)(\d+)$/);
        if (!r) {
            name += "2";
        } else {
            name = r[1] + (parseInt(r[2], 10) + 1);
        }
    }
    return name;
}

// addAnnotation and removeAnnotation puzzles
function handleAnnot(add, annot, objSelector, contents, id, name) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        // check if it already has an annotation and remove it
        for (var j = 0; j < obj.children.length; j++) {
            var child = obj.children[j];
            if (child.type == "Annotation") {
                // delete all childs of annotation
                child.traverse(function(child2) {
                    if (child2.isAnnotation)
                        child2.dispose();
                    });
                obj.remove(child);
            }
        }
        if (add) {
            var aObj = new v3d.Annotation(appInstance.container, annot, contents);
            aObj.name = findUniqueObjectName(name ? name : annot);
            aObj.fadeObscured = _pGlob.fadeAnnotations;
            if (id) {
                aObj.annotation.id = id;
                aObj.annotationDialog.id = id+'_dialog';
            }
            obj.add(aObj);
        }
    }
}

/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}

/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && 'animFrameRate' in scene.userData) {
        return scene.userData.animFrameRate;
    }
    return 24;
}

function _checkListenersSame(target0, type0, listener0, optionsOrUseCapture0,
        target1, type1, listener1, optionsOrUseCapture1) {
    const capture0 = Boolean(optionsOrUseCapture0 instanceof Object
            ? optionsOrUseCapture0.capture : optionsOrUseCapture0);
    const capture1 = Boolean(optionsOrUseCapture1 instanceof Object
            ? optionsOrUseCapture1.capture : optionsOrUseCapture1);
    return target0 === target1 && type0 === type1 && listener0 === listener1
            && capture0 === capture1;
}

/**
 * Add the specified event listener to the specified target. This function also
 * stores listener data for easier disposing.
 */
function bindListener(target, type, listener, optionsOrUseCapture) {
    const alreadyExists = _pGlob.eventListeners.some(elem => {
        return _checkListenersSame(elem.target, elem.type, elem.listener,
                elem.optionsOrUseCapture, target, type, listener,
                optionsOrUseCapture);
    });

    if (!alreadyExists) {
        target.addEventListener(type, listener, optionsOrUseCapture);
        _pGlob.eventListeners.push({ target, type, listener, optionsOrUseCapture });
    }
}

_pGlob.animMixerCallbacks = [];

var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished)) {
            bindListener(appInstance.mixer, 'finished', onMixerFinished);
        }
    };

}();

// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                action.repetitions = Infinity;

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        case 'SET_SPEED':
            var timeScale = parseFloat(speed);
            action.timeScale = rev ? -timeScale : timeScale;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}

// show and hide puzzles
function openCloseAnnotation(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;

        if (obj.isAnnotation)
            obj.setDialogVisibility(bool);
    }
}

// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    bindListener(elem, eventType, pickListener);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        bindListener(elem, touchEventName, pickListener);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        bindListener(elem, touchEventName, doubleTapCallback);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList, false);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}

// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);
            var objNames = retrieveObjectNames(objSelector);

            if (objectsIncludeObj(objNames, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}

// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}

// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;

        bindListener(elem, eventType, callback);
    }
}

function matGetValues(matName) {

    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return [];

    if (mat.isMeshNodeMaterial)
        return Object.keys(mat.nodeValueMap);
    else if (mat.isMeshStandardMaterial)
        return ['metalness', 'roughness', 'bumpScale', 'emissiveIntensity', 'envMapIntensity'];
    else
        return [];
}

// setMaterialValue puzzle
function setMaterialValue(matName, valName, value) {

    var values = matGetValues(matName);
    if (values.indexOf(valName) < 0)
        return;

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var valIdx = mat.nodeValueMap[valName];
            mat.nodeValue[valIdx] = Number(value);
        } else
            mat[valName] = Number(value);

        if (appInstance.scene !== null) {
            if (mat === appInstance.scene.worldMaterial) {
                appInstance.updateEnvironment(mat);
            }
        }
    }
}

// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}

// bloom puzzle
function bloom(threshold, strength, radius) {
    appInstance.enablePostprocessing([{
        type: 'bloom',
        threshold: threshold,
        strength: strength,
        radius: radius
    }]);
}

// outline puzzle
function outline(objSelector, doWhat) {
    var objNames = retrieveObjectNames(objSelector);

    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}

// whenHovered puzzle
initObjectPicking(function(intersects, event) {

    var prevHovered = _pGlob.hoveredObject;
    var currHovered = '';

    // the event might happen before hover registration
    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    // search for closest hovered object

    var lastIntersectIndex = Infinity;
    _pGlob.objHoverInfo.forEach(function(el) {
        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj(retrieveObjectNames(el.objSelector), objName) && i <= lastIntersectIndex) {
                currHovered = objName;
                lastIntersectIndex = i;
            }
        }
    });

    if (prevHovered == currHovered) return;

    // first - all "out" callbacks, then - all "over"
    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(retrieveObjectNames(el.objSelector), prevHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = prevHovered;
            el.callbacks[1](event);
        }
    });

    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(retrieveObjectNames(el.objSelector), currHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = currHovered;
            el.callbacks[0](event);
        }
    });

    _pGlob.hoveredObject = currHovered;
}, 'mousemove', false);

// whenHovered puzzle
function registerOnHover(objSelector, xRay, cbOver, cbOut) {

    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    _pGlob.objHoverInfo.push({
        objSelector: objSelector,
        callbacks: [cbOver, cbOut],
        xRay: xRay
    });
}

// isObjectVisible puzzle
function isObjectVisible(objSelector) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (obj.visible)
            return true;
    }
    return false;
}

// Describe this function...
function hideEqual() {
  changeVis('Eq1', false);
  changeVis('EqHesh1', false);
  changeVis('EqPHesh2', false);
  changeVis('Eq2', false);
  changeVis('EqHesh2', false);
  changeVis('noEq2', false);
  changeVis('noEq1', false);
  changeVis('EqPHesh21', false);
}

function matGetColors(matName) {
    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return [];

    if (mat.isMeshNodeMaterial)
        return Object.keys(mat.nodeRGBMap);
    else if (mat.isMeshStandardMaterial)
        return ['color', 'emissive'];
    else
        return [];
}

// setMaterialColor puzzle
function setMaterialColor(matName, colName, r, g, b, cssCode) {

    var colors = matGetColors(matName);

    if (colors.indexOf(colName) < 0)
        return;

    if (cssCode) {
        var color = new v3d.Color(cssCode);
        color.convertSRGBToLinear();
        r = color.r;
        g = color.g;
        b = color.b;
    }

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var rgbIdx = mat.nodeRGBMap[colName];
            mat.nodeRGB[rgbIdx].x = r;
            mat.nodeRGB[rgbIdx].y = g;
            mat.nodeRGB[rgbIdx].z = b;
        } else {
            mat[colName].r = r;
            mat[colName].g = g;
            mat[colName].b = b;
        }
        mat.needsUpdate = true;

        if (appInstance.scene !== null) {
            if (mat === appInstance.scene.worldMaterial) {
                appInstance.updateEnvironment(mat);
            }
        }
    }
}

// Describe this function...
function lastAnno() {
  handleAnnot(true, 'DistributionError', 'AnnotationReMine', 'Не получилось…Что однозначно хорошо! И обусловлено произошедшее распределённостью и децентрализацией блокчейна. Он представляет собой сеть, которая состоит из множества узлов, каждый из которых хранит копию блокчейна. В ней нет центрального узла, который контролирует все операции, и каждый узел имеет равные права и возможности. Это делает сеть более устойчивой к атакам и обеспечивает более высокий уровень безопасности. Распределенная сеть блокчейна использует концепцию консенсуса, чтобы гарантировать, что все узлы в сети согласны с тем, какие блоки добавляются в цепочку. Это достигается путем использования различных алгоритмов консенсуса, таких как Proof-of-Work, Proof-of-Stake, Delegated Proof-of-Stake и других. Первый из них мы как раз и использовали, вычисляя Nonce каждого блока. ', 'DistributionError', undefined);
  openCloseAnnotation('DistributionError', true);
  handleAnnot(true, 'i', 'PeerA', 'Перемайненные и ранее отклоненные блоки в Узле А (Peer A) снова были отвергнуты системой из-за того, что блокчейн - децентрализованная система, где все узлы имеют одинаковую копию цепочки блоков.  Каждый узел проверяет и сравнивает хеши каждого своего блока между блоками остальных узлов для подтверждения подлинности и целостности.  Таким образом, даже если пользователь перемайнит отклоненные блоки в своем узле, остальные узлы в сети отклонят их, так как эти блоки не соответствуют хеш-кодам, которые были получены другими узлами ранее. Это обеспечивает целостность и надежность блокчейн-технологии, так как любые изменения в цепочке блоков должны быть согласованы всеми узлами в сети.', 'Distribution', undefined);
  openCloseAnnotation('i', true);
}


changeVis('Distributed', false);
changeVis('PeerA', false);
changeVis('noEq1', false);
changeVis('noEq2', false);
changeVis('EqPHesh21', false);
changeVis('EqHesh2', false);
changeVis('Eq2', false);
changeVis('EditData2', false);
changeVis('EditData1', false);
changeVis('EqPHesh2', false);
changeVis('EqHesh1', false);
changeVis('Eq1', false);
changeVis('Chain2', false);
changeVis('Chain1', false);
changeVis('Cube1', false);
changeVis('Cube2', false);
changeVis('Kryshka2', false);
changeVis('Kryshka1', false);
changeVis('Nonce', false);
changeVis('Data', false);
changeVis('EditData', false);
changeVis('HESH', false);
registerOnClick('Kryshka', false, false, [0,1,2], function() {
  tweenCamera('', 'Cube', 1, function() {}, 0);
  handleAnnot(false, '', 'AnnotationReMine', '', '', undefined);

  operateAnimation('PLAY', 'Kryshka', 0, 10, 'LoopOnce', 1,
          function() {}, false);

      firstBlock = true;
  checkRemine = false;
  checkEditStartOutline = false;
  handleAnnot(true, 'addData', 'AnnotationReMine', 'Добавь содержимое в блок, нажав кнопку "ADD" и обязательно ознакомься с данными, которые добавляешь!', 'addData', undefined);
  openCloseAnnotation('addData', true);
}, function() {});
eventHTMLElem('mousedown', 'add', true, function(event) {
  if (firstBlock == true) {
    handleAnnot(false, '', 'AnnotationReMine', '', '', undefined);
    handleAnnot(true, 'letsMine', 'AnnotationReMine', 'Давай добавим твой первый блок в цепочку, для этого необходимо вычислить Nonce. Нажми "MINE" и познакомься с новым понятием! ', 'letsMine', undefined);
    openCloseAnnotation('letsMine', true);
    changeVis('Data', true);
    changeVis('HESH', true);
  }
});
eventHTMLElem('mousedown', 'mine', true, function(event) {
  if (firstBlock == true) {
    if (checkRemine == false) {
      handleAnnot(false, '', 'AnnotationReMine', '', '', undefined);

      operateAnimation('PLAY', 'Data', 0, 10, 'LoopOnce', 1,
              function() {}, false);

          changeVis('Nonce', true);

      operateAnimation('PLAY', 'Nonce', 0, 10, 'LoopOnce', 1,
              function() {}, false);

          setMaterialValue('HESH', 'Value', 1);
    }
  }
});
registerOnClick('Nonce', false, false, [0,1,2], function() {
  changeVis('Nonce', false);

  operateAnimation('PLAY', 'HESH', 0, 10, 'LoopOnce', 1,
          function() {}, false);

      registerSetTimeout(0.3, function() {

    operateAnimation('PLAY', 'Kryshka', 10, 20, 'LoopOnce', 1,
            function() {}, false);

        setMaterialValue('Block1', 'Value', 1);
    changeVis('Chain2', true);
    changeVis('Cube1', true);
    changeVis('Kryshka1', true);
    handleAnnot(true, 'GoodJob!', 'AnnotationReMine', 'Молодец! А теперь повтори пройденное с остальными блоками, чтобы закрепить материал и не забывай читать аннотации! Для начала нажми на крышку следующего блока.', 'GoodJob!', undefined);
    openCloseAnnotation('GoodJob!', true);
    firstBlock = false;
  });
}, function() {});

bloom(0.8, 0.4, 0.2);
handleAnnot(true, 'welcome', 'AnnotationReMine', 'Здравствуй! Добро пожаловать в приложение «BlockchainDemo». Здесь ты узнаешь основные тонкости работы блокчейн-технологий. Чтобы узнать какую-либо информацию об объекте, просто наведи курсор на него и нажми на подсказку. Удачи!)', 'welcome', undefined);
openCloseAnnotation('welcome', true);
registerOnHover('Kryshka', false, function() {
  outline('Kryshka', 'ENABLE');
  handleAnnot(true, 'i', 'Kryshka', 'Чтобы начать, кликните по крышке.', 'poi1', undefined);
}, function() {
  outline('Kryshka', 'DISABLE');
  handleAnnot(false, '', 'Kryshka', '', '', undefined);
});
registerOnHover('Kryshka1', false, function() {
  outline('Kryshka1', 'ENABLE');
  handleAnnot(true, 'i', 'Kryshka1', 'Чтобы продолжить, кликните по крышке.', 'poi1', undefined);
}, function() {
  outline('Kryshka1', 'DISABLE');
  handleAnnot(false, '', 'Kryshka1', '', '', undefined);
});
registerOnHover('Kryshka2', false, function() {
  outline('Kryshka2', 'ENABLE');
}, function() {
  outline('Kryshka2', 'DISABLE');
});
registerOnHover('Data', false, function() {
  outline('Data', 'ENABLE');
  handleAnnot(true, 'Data', 'Data', 'Данные блока включают информацию, например, о транзакциях, датах и времени создания блока. Любые изменения в данных блока приведут к изменению его хеш-кода, что повлияет на целостность всей цепочки блоков.', 'poi1', undefined);
}, function() {
  outline('Data', 'DISABLE');
  handleAnnot(false, '', 'Data', '', '', undefined);
});
registerOnHover('EditData', false, function() {
  outline('EditData', 'ENABLE');
}, function() {
  outline('EditData', 'DISABLE');
});
registerOnHover('HESH', false, function() {
  outline('HESH', 'ENABLE');
  handleAnnot(true, 'Hash', 'HESH', 'Хеш-код в блокчейне - уникальный идентификатор, который используется для представления блока данных в виде одной строки фиксированной длины. Хеш-код рассчитывается с помощью математической функции хеширования, которая принимает на вход данные блока и преобразует их в уникальный набор символов фиксированной длины.', 'poi1', undefined);
}, function() {
  outline('HESH', 'DISABLE');
  handleAnnot(false, '', 'HESH', '', '', undefined);
});
registerOnHover('Nonce', false, function() {
  outline('Nonce', 'ENABLE');
  handleAnnot(true, 'i', 'Nonce', 'Nonce (часто расшифровывается как "number used once") - число, добавляемое в заголовок блока в процессе майнинга. Для того, чтобы найти правильный хеш, майнеры изменяют значение nonce в блоке и пересчитывают хеш до тех пор, пока он не удовлетворит определенным критериям сложности. Этот процесс называется "доказательством работы" (proof-of-work) и используется для защиты блокчейна от взлома. Кликните по Nonce для продолжения.', 'poi1', undefined);
}, function() {
  handleAnnot(false, '', 'Nonce', '', '', undefined);
  outline('Nonce', 'DISABLE');
});
registerOnHover('Nonce.1', false, function() {
  outline('Nonce.1', 'ENABLE');
  handleAnnot(true, 'i', 'Nonce.1', 'Nonce является важным компонентом, который позволяет майнерам находить новые блоки и добавлять их в блокчейн. Майнеры, которые находят подходящее значение nonce, получают вознаграждение в виде криптовалюты. Каждый блок в блокчейне имеет свой уникальный nonce, и процесс его нахождения требует значительных вычислительных мощностей, что делает блокчейн безопасным и надежным способом хранения и передачи информации.', 'poi1', undefined);
}, function() {
  handleAnnot(false, '', 'Nonce.1', '', '', undefined);
  outline('Nonce.1', 'DISABLE');
});
registerOnHover('Nonce.2', false, function() {
  outline('Nonce.2', 'ENABLE');
  handleAnnot(true, 'i', 'Nonce.2', 'В системе Bitcoin Nonce является целым числом и может принимать значения от 0 до 2^32-1. Так, в блокчейне Bitcoin каждый новый блок находится примерно каждые 10 минут.', 'poi1', undefined);
}, function() {
  handleAnnot(false, '', 'Nonce.2', '', '', undefined);
  outline('Nonce.2', 'DISABLE');
});
registerOnHover('Data1', false, function() {
  outline('Data1', 'ENABLE');
  handleAnnot(true, 'Data', 'Data1', 'Данные в блоке блокчейна представляют собой набор цифр и букв, зашифрованных в хеш-код, и они не могут быть изменены или удалены без изменения хеша. Это обеспечивает целостность и безопасность цепочки блоков, так как любые изменения в одном блоке автоматически приведут к изменению всех последующих блоков.', 'poi1', undefined);
}, function() {
  handleAnnot(false, '', 'Data1', '', '', undefined);
  outline('Data1', 'DISABLE');
});
registerOnHover('HESH.1', false, function() {
  outline('HESH.1', 'ENABLE');
  handleAnnot(true, 'Hash', 'HESH.1', 'Хеш-код используется для подтверждения правильности данных и обеспечения защиты от фальсификации. Любые изменения в данных блока приводят к изменению его хеш-кода. Это связано с тем, что результат хеширования функции SHA-256 считается необратимым, на данный момент нет алгоритма получения желаемого результата, кроме случайного перебора.', 'poi1', undefined);
}, function() {
  handleAnnot(false, '', 'HESH.1', '', '', undefined);
  outline('HESH.1', 'DISABLE');
});
registerOnHover('PrevHesh.1', false, function() {
  outline('PrevHesh.1', 'ENABLE');
  handleAnnot(true, 'Previous Hash', 'PrevHesh.1', 'Previous hash (предыдущий хеш) - уникальный хеш-код предыдущего блока в цепочке блоков. Является важным компонентом каждого блока в блокчейне и используется для связи блоков в цепочке. Его роль заключается обеспечении целостности и надежности цепочки. Каждый блок содержит хеш-код предыдущего блока в своих данных, и поскольку каждый блок в цепочке ссылается на хеш-код предыдущего блока, невозможно изменить данные в одном блоке, не затронув целую цепочку блоков после него.', 'poi1', undefined);
}, function() {
  handleAnnot(false, '', 'PrevHesh.1', '', '', undefined);
  outline('PrevHesh.1', 'DISABLE');
});
registerOnHover('Data2', false, function() {
  outline('Data2', 'ENABLE');
  handleAnnot(true, 'Data', 'Data2', 'В блокчейне Bitcoin, например, данные в блоке содержат информацию о транзакциях: адрес отправителя, адрес получателя, количество передаваемых биткоинов и комиссионные сборы. Каждый блок содержит некоторое количество транзакций и после его добавления в цепочку блоков, данные транзакции считаются подтвержденными и не могут быть изменены или отменены.', 'poi1', undefined);
}, function() {
  handleAnnot(false, '', 'Data2', '', '', undefined);
  outline('Data2', 'DISABLE');
});
registerOnHover('HESH.2', false, function() {
  outline('HESH.2', 'ENABLE');
  handleAnnot(true, 'Hash', 'HESH.2', 'В блокчейне Bitcoin, например, данные в блоке содержат информацию о транзакциях: адрес отправителя, адрес получателя, количество передаваемых биткоинов и комиссионные сборы. Каждый блок содержит некоторое количество транзакций и после его добавления в цепочку блоков, данные транзакции считаются подтвержденными и не могут быть изменены или отменены.', 'poi1', undefined);
}, function() {
  handleAnnot(false, '', 'HESH.2', '', '', undefined);
  outline('HESH.2', 'DISABLE');
});
registerOnHover('PrevHesh.2', false, function() {
  outline('PrevHesh.2', 'ENABLE');
  handleAnnot(true, 'Previous Hash', 'PrevHesh.2', 'Previous Hash также используется для поиска конкретного блока в цепочке. Так обратиться к определенному блоку в блокчейне можно начав поиск с последнего блока в цепочке используя previous hash каждого блока для перехода к предыдущему до тех пор, пока не будет найден нужный блок. Таким образом, previous hash играет важную роль в обеспечении безопасности и надежности блокчейна, благодаря ему каждый блок связан друг с другом в надежной и неизменяемой цепочке блоков.', 'poi1', undefined);
}, function() {
  handleAnnot(false, '', 'PrevHesh.2', '', '', undefined);
  outline('PrevHesh.2', 'DISABLE');
});

registerOnHover('Cube', false, function() {
  if (checkEditStartOutline == false) {
    outline('Cube', 'ENABLE');
    handleAnnot(true, 'Genesis Block', 'Cube', 'Первый блок в блокчейне, не имеет ссылки на предыдущий блок (previous hash), так как он является первым блоком в цепочке и не имеет предшественников, служит отправной точкой для последующих блоков, которые будут иметь ссылки на предыдущие блоки, образуя тем самым цепочку. Чтобы открыть блок, нажмите на крышку.', 'poi1', undefined);
  }
}, function() {
  if (checkEditStartOutline == false) {
    outline('Cube', 'DISABLE');
    handleAnnot(false, '', 'Cube', '', '', undefined);
  }
});
registerOnHover('Cube1', false, function() {
  if (checkEditStartOutline == false) {
    outline('Cube1', 'ENABLE');
    handleAnnot(true, 'Block 1', 'Cube1', 'Блок - специальная структура для записи данных, которые не могут быть изменены без изменения всей цепочки блоков, которая построена на нем. Содержит информацию о транзакциях, произведенных в сети блокчейн, и другую важную информацию, такую как хеш предыдущего блока, время создания блока, номер блока и некоторые другие данные. Блоки связаны друг с другом через хеш-значение предыдущего блока, что создает цепочку блоков, которая называется блокчейном.', 'poi1', undefined);
  }
}, function() {
  if (checkEditStartOutline == false) {
    outline('Cube1', 'DISABLE');
    handleAnnot(false, '', 'Cube1', '', '', undefined);
  }
});
registerOnHover('Cube2', false, function() {
  if (checkEditStartOutline == false) {
    outline('Cube2', 'ENABLE');
    handleAnnot(true, 'Block N', 'Cube2', 'Размер блока в блокчейне Bitcoin ограничен и составляет в настоящее время 1 МБ. Время создания нового блока в блокчейне Bitcoin зависит от скорости обработки транзакций в сети и может варьироваться от нескольких секунд до нескольких минут.', 'poi1', undefined);
  }
}, function() {
  if (checkEditStartOutline == false) {
    outline('Cube2', 'DISABLE');
    handleAnnot(false, '', 'Cube2', '', '', undefined);
  }
});

changeVis('Nonce.2', false);
changeVis('Data2', false);
changeVis('PrevHesh.2', false);
changeVis('HESH.2', false);
changeVis('PrevHesh.1', false);
changeVis('HESH.1', false);
changeVis('Data1', false);
changeVis('Nonce.1', false);
registerOnClick('Kryshka1', false, false, [0,1,2], function() {
  tweenCamera('', 'Cube1', 1, function() {}, 0);
  handleAnnot(false, '', 'AnnotationReMine', '', '', undefined);

  operateAnimation('PLAY', 'Kryshka1', 0, 10, 'LoopOnce', 1,
          function() {}, false);

      secondBlock = true;
  checkRemine = false;
}, function() {});
eventHTMLElem('mousedown', 'add', true, function(event) {
  if (secondBlock == true) {
    changeVis('Data1', true);
    changeVis('PrevHesh.1', true);
    changeVis('HESH.1', true);
  }
});
eventHTMLElem('mousedown', 'mine', true, function(event) {
  if (secondBlock == true) {
    if (checkRemine == false) {

      operateAnimation('PLAY', 'Data1', 0, 10, 'LoopOnce', 1,
              function() {}, false);


      operateAnimation('PLAY', 'PrevHesh.1', 0, 10, 'LoopOnce', 1,
              function() {}, false);

          changeVis('Nonce.1', true);

      operateAnimation('PLAY', 'Nonce.1', 0, 10, 'LoopOnce', 1,
              function() {}, false);

          setMaterialValue('HESH1', 'Value', 1);
    }
  }
});
registerOnClick('Nonce.1', false, false, [0,1,2], function() {
  changeVis('Nonce.1', false);

  operateAnimation('PLAY', 'HESH.1', 0, 10, 'LoopOnce', 1,
          function() {}, false);

      registerSetTimeout(0.3, function() {

    operateAnimation('PLAY', 'Kryshka1', 10, 20, 'LoopOnce', 1,
            function() {}, false);

        setMaterialValue('Block2', 'Value', 1);
    setMaterialValue('Chain2', 'Value', 1);
    changeVis('EqPHesh2', true);
    changeVis('EqHesh1', true);
    changeVis('Eq1', true);

    operateAnimation('PLAY', 'Eq1', 0, 20, 'LoopOnce', 1,
            function() {}, false);

        changeVis('Chain1', true);
    changeVis('Cube2', true);
    changeVis('Kryshka2', true);
    secondBlock = false;
  });
}, function() {});

registerOnClick('Kryshka2', false, false, [0,1,2], function() {
  tweenCamera('', 'Cube2', 1, function() {}, 0);

  operateAnimation('PLAY', 'Kryshka2', 0, 10, 'LoopOnce', 1,
          function() {}, false);

      thirdBlock = true;
  check = 0;
  checkRemine = false;
}, function() {});
eventHTMLElem('mousedown', 'add', true, function(event) {
  if (thirdBlock == true) {
    changeVis('Data2', true);
    changeVis('PrevHesh.2', true);
    changeVis('HESH.2', true);
  }
});
eventHTMLElem('mousedown', 'mine', true, function(event) {
  if (thirdBlock == true) {
    if (checkRemine == false) {

      operateAnimation('PLAY', 'Data2', 0, 10, 'LoopOnce', 1,
              function() {}, false);


      operateAnimation('PLAY', 'PrevHesh.2', 0, 10, 'LoopOnce', 1,
              function() {}, false);

          changeVis('Nonce.2', true);

      operateAnimation('PLAY', 'Nonce.2', 0, 10, 'LoopOnce', 1,
              function() {}, false);

          setMaterialValue('HESH2', 'Value', 1);
    }
  }
});
registerOnClick('Nonce.2', false, false, [0,1,2], function() {
  changeVis('Nonce.2', false);

  operateAnimation('PLAY', 'HESH.2', 0, 10, 'LoopOnce', 1,
          function() {}, false);

      registerSetTimeout(0.3, function() {

    operateAnimation('PLAY', 'Kryshka2', 10, 20, 'LoopOnce', 1,
            function() {}, false);

        setMaterialValue('Block3', 'Value', 1);
    setMaterialValue('Chain1', 'Value', 1);
    changeVis('EqHesh2', true);
    changeVis('EqPHesh21', true);
    changeVis('Eq2', true);

    operateAnimation('PLAY', 'Eq2', 0, 20, 'LoopOnce', 1,
            function() {}, false);

        thirdBlock = false;
    check = 1;
    registerSetTimeout(0.5, function() {
      handleAnnot(true, 'WOW, ok let\'s try...', 'AnnotationReMine', 'Круто, теперь твоя цепочка блоков опубликована в системе блокчейн! Но это не все, впереди ждет еще много интересного. Попробуй изменить содержимое какого-либо из блоков, для этого кликни по любому блоку и нажми кнопку «EDIT».', 'WOW, ok let\'s try...', undefined);
      openCloseAnnotation('WOW, ok let\'s try...', true);
    });
  });
}, function() {});

registerOnClick('Cube1', false, false, [0,1,2], function() {
  if (check == 1) {
    numBlock = 2;
    if (checkRemine == false) {

      operateAnimation('PLAY', 'Kryshka1', 0, 10, 'LoopOnce', 1,
              function() {}, false);


      operateAnimation('PLAY', 'Data1', 0, 10, 'LoopOnce', 1,
              function() {}, true);


      operateAnimation('PLAY', 'PrevHesh.1', 0, 10, 'LoopOnce', 1,
              function() {}, true);


      operateAnimation('PLAY', 'HESH.1', 0, 10, 'LoopOnce', 1,
              function() {}, true);

          tweenCamera('', 'Cube1', 1, function() {}, 0);
    }
  }
}, function() {});

registerOnClick('Cube', false, false, [0,1,2], function() {
  if (check == 1) {
    numBlock = 1;
    if (checkRemine == false) {

      operateAnimation('PLAY', 'Kryshka', 0, 10, 'LoopOnce', 1,
              function() {}, false);


      operateAnimation('PLAY', 'Data', 0, 10, 'LoopOnce', 1,
              function() {}, true);


      operateAnimation('PLAY', 'HESH', 0, 10, 'LoopOnce', 1,
              function() {}, true);

          tweenCamera('', 'Cube', 1, function() {}, 0);
    }
  }
}, function() {});

if (!isObjectVisible('Eq1')) {
  handleAnnot(false, '', 'Eq1', '', '', undefined);
}
if (!isObjectVisible('Eq2')) {
  handleAnnot(false, '', 'Eq2', '', '', undefined);
}
if (!isObjectVisible('noEq1')) {
  handleAnnot(false, '', 'noEq1', '', '', undefined);
}
if (!isObjectVisible('noEq2')) {
  handleAnnot(false, '', 'noEq2', '', '', undefined);
}

registerOnClick('Cube2', false, false, [0,1,2], function() {
  if (check == 1) {
    numBlock = 3;
    if (checkRemine == false) {

      operateAnimation('PLAY', 'Kryshka2', 0, 10, 'LoopOnce', 1,
              function() {}, false);


      operateAnimation('PLAY', 'Data2', 0, 10, 'LoopOnce', 1,
              function() {}, true);


      operateAnimation('PLAY', 'PrevHesh.2', 0, 10, 'LoopOnce', 1,
              function() {}, true);


      operateAnimation('PLAY', 'HESH.2', 0, 10, 'LoopOnce', 1,
              function() {}, true);

          tweenCamera('', 'Cube2', 1, function() {}, 0);
    }
  }
}, function() {});

registerOnHover(['Eq1', 'EqHesh1', 'EqPHesh2'], false, function() {
  outline(['Eq1', 'EqHesh1', 'EqPHesh2', 'Chain2'], 'ENABLE');
  handleAnnot(true, 'i', 'Eq1', 'Связь между блоками в цепочке в блокчейне строится на основе использования хешей и ссылок на предыдущие блоки. Так, каждый блок содержит ссылку на хеш предыдущего блока в цепочке. Это обеспечивает связь между блоками и создает неизменяемость цепочки блоков, так как любое изменение данных в одном блоке приведет к изменению хеша блока, а следовательно, и ссылки на предыдущий блок.', 'poi1', undefined);
}, function() {
  handleAnnot(false, '', 'Eq1', '', '', undefined);
  outline(['Eq1', 'EqHesh1', 'EqPHesh2', 'Chain2'], 'DISABLE');
});
registerOnHover(['Eq2', 'EqHesh2', 'EqPHesh21'], false, function() {
  outline(['Eq2', 'EqHesh2', 'EqPHesh21', 'Chain1'], 'ENABLE');
  handleAnnot(true, 'i', 'Eq2', 'Так связь между блоками создает цепочку, где каждый блок является частью предыдущего блока и каждый последующий блок в цепочке усиливает безопасность и неизменяемость всей цепочки блоков.', 'poi1', undefined);
}, function() {
  handleAnnot(false, '', 'Eq1', '', '', undefined);
  outline(['Eq2', 'EqHesh2', 'EqPHesh21', 'Chain1'], 'DISABLE');
});

eventHTMLElem('mousedown', 'edit', true, function(event) {
  checkRemine = true;
  if (check == 1) {
    handleAnnot(false, '', 'AnnotationReMine', '', '', undefined);
    registerSetTimeout(1.5, function() {
      handleAnnot(true, 'ERROR', 'AnnotationReMine', 'У--упс! :(  Прочитай аннотации, почему так произошло. Попробуй исправить ситуацию,  замайни снова отклоненные системой блоки, из-за которых была нарушена целостность цепочки. Выберете блок и нажмите кнопку "MINE".', 'ERROR', undefined);
      openCloseAnnotation('ERROR', true);
    });
    if (numBlock == 1) {
      changeVis('Data', false);
      changeVis('EditData', true);

      operateAnimation('PLAY', 'EditData', 0, 10, 'LoopOnce', 1,
              function() {}, false);

          setMaterialValue('HESH', 'Value', 0);
      registerSetTimeout(2, function() {

        operateAnimation('PLAY', 'EditData', 10, 20, 'LoopOnce', 1,
                function() {}, false);


        operateAnimation('PLAY', 'HESH', 0, 10, 'LoopOnce', 1,
                function() {}, false);


        operateAnimation('PLAY', 'Kryshka', 10, 20, 'LoopOnce', 1,
                function() {}, false);

            changeVis('Eq1', false);
        changeVis('Eq2', false);
        changeVis('noEq1', true);
        changeVis('noEq2', true);
        setMaterialColor('EqHesh1', 'RGB', 1, 0, 0, '');
        setMaterialColor('EqHesh1.001', 'RGB', 1, 0, 0, '');
        setMaterialColor('EqPHesh1', 'RGB', 1, 0, 0, '');
        setMaterialColor('EqPHesh1.001', 'RGB', 1, 0, 0, '');
        setMaterialColor('Block1', 'RGB', 1, 0, 0, '');
        setMaterialColor('Block2', 'RGB', 1, 0, 0, '');
        setMaterialColor('Block3', 'RGB', 1, 0, 0, '');
        setMaterialColor('Chain1', 'RGB', 1, 0, 0, '');
        setMaterialColor('Chain2', 'RGB', 1, 0, 0, '');
        checkEditStartOutline = true;
      });
    } else if (numBlock == 2) {
      changeVis('Data1', false);
      changeVis('EditData1', true);

      operateAnimation('PLAY', 'EditData1', 0, 10, 'LoopOnce', 1,
              function() {}, false);

          setMaterialValue('HESH1', 'Value', 0);
      registerSetTimeout(2, function() {
        changeVis('Eq2', false);
        changeVis('noEq2', true);
        setMaterialColor('EqPHesh1.001', 'RGB', 1, 0, 0, '');
        setMaterialColor('EqHesh1.001', 'RGB', 1, 0, 0, '');

        operateAnimation('PLAY', 'EditData1', 10, 20, 'LoopOnce', 1,
                function() {}, false);


        operateAnimation('PLAY', 'PrevHesh.1', 0, 10, 'LoopOnce', 1,
                function() {}, false);


        operateAnimation('PLAY', 'HESH.1', 0, 10, 'LoopOnce', 1,
                function() {}, false);


        operateAnimation('PLAY', 'Kryshka1', 10, 20, 'LoopOnce', 1,
                function() {}, false);

            setMaterialColor('Block2', 'RGB', 1, 0, 0, '');
        setMaterialColor('Chain1', 'RGB', 1, 0, 0, '');
        setMaterialColor('Block3', 'RGB', 1, 0, 0, '');
        checkEditStartOutline = true;
      });
    } else if (numBlock == 3) {
      changeVis('Data2', false);
      changeVis('EditData2', true);

      operateAnimation('PLAY', 'EditData2', 0, 10, 'LoopOnce', 1,
              function() {}, false);

          setMaterialValue('HESH2', 'Value', 0);
      registerSetTimeout(2, function() {
        changeVis('Eq2', false);
        changeVis('noEq2', true);
        setMaterialColor('EqPHesh1.001', 'RGB', 1, 0, 0, '');
        setMaterialColor('EqHesh1.001', 'RGB', 1, 0, 0, '');

        operateAnimation('PLAY', 'EditData2', 10, 20, 'LoopOnce', 1,
                function() {}, false);


        operateAnimation('PLAY', 'PrevHesh.2', 0, 10, 'LoopOnce', 1,
                function() {}, false);


        operateAnimation('PLAY', 'HESH.2', 0, 10, 'LoopOnce', 1,
                function() {}, false);


        operateAnimation('PLAY', 'Kryshka2', 10, 20, 'LoopOnce', 1,
                function() {}, false);

            setMaterialColor('Block3', 'RGB', 1, 0, 0, '');
        checkEditStartOutline = true;
      });
    }
  }
});

registerOnClick('Cube', false, false, [0,1,2], function() {
  if (checkEditStartOutline == true) {
    outline('Cube', 'ENABLE');
    handleAnnot(false, '', 'AnnotationReMine', '', '', undefined);
    tweenCamera('', 'Cube', 1, function() {}, 0);
  }
}, function() {
  outline('Cube', 'DISABLE');
});
registerOnClick('Cube1', false, false, [0,1,2], function() {
  if (checkEditStartOutline == true) {
    outline('Cube1', 'ENABLE');
    handleAnnot(false, '', 'AnnotationReMine', '', '', undefined);
    tweenCamera('', 'Cube1', 1, function() {}, 0);
  }
}, function() {
  outline('Cube1', 'DISABLE');
});
registerOnClick('Cube2', false, false, [0,1,2], function() {
  if (checkEditStartOutline == true) {
    outline('Cube2', 'ENABLE');
    handleAnnot(false, '', 'AnnotationReMine', '', '', undefined);
    tweenCamera('', 'Cube2', 1, function() {}, 0);
  }
}, function() {
  outline('Cube2', 'DISABLE');
});
eventHTMLElem('mousedown', 'mine', true, function(event) {
  if (checkRemine == true) {
    if (numBlock == 1) {
      changeVis('Nonce', true);

      operateAnimation('PLAY', 'Nonce', 0, 10, 'LoopOnce', 1,
              function() {}, false);


      operateAnimation('PLAY', 'HESH', 0, 0, 'LoopOnce', 1,
              function() {}, false);

          setMaterialValue('HESH', 'Value', 1);
      registerSetTimeout(1, function() {
        changeVis('Nonce', false);
        changeVis('HESH', false);
        setMaterialColor('Block1', 'RGB', 0, 1, 0, '');
      });
      registerSetTimeout(10, function() {
        setMaterialColor('Block1', 'RGB', 1, 0, 0, '');
        setMaterialColor('Block2', 'RGB', 1, 0, 0, '');
        setMaterialColor('Block3', 'RGB', 1, 0, 0, '');
        setMaterialColor('Chain2', 'RGB', 1, 0, 0, '');
        setMaterialColor('Chain1', 'RGB', 1, 0, 0, '');
        changeVis('PeerA', true);
        changeVis('Distributed', true);
        hideEqual();
        lastAnno();
      });
    } else if (numBlock == 2) {
      changeVis('Nonce.1', true);

      operateAnimation('PLAY', 'Nonce.1', 0, 10, 'LoopOnce', 1,
              function() {}, false);


      operateAnimation('PLAY', 'HESH.1', 0, 0, 'LoopOnce', 1,
              function() {}, false);

          setMaterialValue('HESH1', 'Value', 1);
      registerSetTimeout(1, function() {
        changeVis('HESH.1', false);
        changeVis('Nonce.1', false);
        changeVis('noEq1', false);
        changeVis('Eq1', true);
        setMaterialColor('Block2', 'RGB', 0, 1, 0, '');
        setMaterialColor('Chain2', 'RGB', 0, 1, 0, '');
        setMaterialColor('EqHesh1', 'RGB', 0, 1, 0, '');
        setMaterialColor('EqPHesh1', 'RGB', 0, 1, 0, '');
        registerSetTimeout(10, function() {
          setMaterialColor('Block2', 'RGB', 1, 0, 0, '');
          setMaterialColor('Block3', 'RGB', 1, 0, 0, '');
          setMaterialColor('Chain1', 'RGB', 1, 0, 0, '');
          changeVis('PeerA', true);
          changeVis('Distributed', true);
          hideEqual();
          lastAnno();
        });
      });
    } else if (numBlock == 3) {
      changeVis('Nonce.2', true);

      operateAnimation('PLAY', 'Nonce.2', 0, 10, 'LoopOnce', 1,
              function() {}, false);


      operateAnimation('PLAY', 'HESH.2', 0, 0, 'LoopOnce', 1,
              function() {}, false);

          setMaterialValue('HESH2', 'Value', 1);
      registerSetTimeout(1, function() {
        changeVis('HESH.2', false);
        changeVis('Nonce.2', false);
        changeVis('noEq2', false);
        changeVis('Eq2', true);
        setMaterialColor('EqPHesh1.001', 'RGB', 0, 1, 0, '');
        setMaterialColor('EqHesh1.001', 'RGB', 0, 1, 0, '');
        setMaterialColor('Block3', 'RGB', 0, 1, 0, '');
        setMaterialColor('Chain1', 'RGB', 0, 1, 0, '');
        registerSetTimeout(10, function() {
          setMaterialColor('Block3', 'RGB', 1, 0, 0, '');
          changeVis('PeerA', true);
          changeVis('Distributed', true);
          hideEqual();
          lastAnno();
        });
      });
    }
  }
});

registerOnHover(['noEq1', 'EqHesh1', 'EqPHesh2'], false, function() {
  outline(['noEq1', 'EqHesh1', 'EqPHesh2', 'Chain2'], 'ENABLE');
  handleAnnot(true, 'i', 'noEq1', 'При попытке изменения содержимого предыдущего блока соответственно изменяется и его хеш, который больше не равен значению ссылки на Previous Hesh в следующем блоке. В таком случае сеть блокчейна распознает, что произошло нарушение целостности и отклоняет такой блок как недействительный. Равенство # = Prev# имеет принципиальное значение и описывает связь каждого блока с предыдущим, поскольку это обеспечивает безопасность, целостность и надежность всей системы.', 'poi1', undefined);
}, function() {
  handleAnnot(false, '', 'noEq1', '', '', undefined);
  outline(['noEq1', 'EqHesh1', 'EqPHesh2', 'Chain2'], 'DISABLE');
});
registerOnHover(['noEq2', 'EqHesh2', 'EqPHesh21'], false, function() {
  outline(['noEq2', 'EqHesh2', 'EqPHesh21', 'Chain1'], 'ENABLE');
  handleAnnot(true, 'i', 'noEq2', 'При попытке изменения содержимого предыдущего блока соответственно изменяется и его хеш, который больше не равен значению ссылки на Previous Hesh в следующем блоке. В таком случае сеть блокчейна распознает, что произошло нарушение целостности и отклоняет такой блок как недействительный. Равенство # = Prev# имеет принципиальное значение и описывает связь каждого блока с предыдущим, поскольку это обеспечивает безопасность, целостность и надежность всей системы.', 'poi1', undefined);
}, function() {
  handleAnnot(false, '', 'noEq2', '', '', undefined);
  outline(['noEq2', 'EqHesh2', 'EqPHesh21', 'Chain1'], 'DISABLE');
});



} // end of PL.init function

PL.disposeListeners = function() {
    if (_pGlob) {
        _pGlob.eventListeners.forEach(({ target, type, listener, optionsOrUseCapture }) => {
            target.removeEventListener(type, listener, optionsOrUseCapture);
        });
        _pGlob.eventListeners.length = 0;
    }
}

PL.dispose = function() {
    PL.disposeListeners();
    _pGlob = null;
    // backward compatibility
    delete v3d.PL;
    delete v3d.puzzles;
}



return PL;

}

export { createPL };
